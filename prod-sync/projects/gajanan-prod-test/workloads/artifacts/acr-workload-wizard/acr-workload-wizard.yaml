apiVersion: v1
data:
  tls.crt: 
  tls.key: c2VjcmV0c3RvcmU6cmttczozYkRMT2lrVFFUMmlQUGpxWTBSZHh0Y2I4TjI1SFlNdzlCa3FaR1NkQjUvaGp4dllqOGpKck8wZThzZVZnT1VlaEwrUzc4YzlkS0pUNjZWdWVyTTlSL25WM2FaajR5bi9iMjBLRDVxWHRGRGhXMUp1NjJZVjB6QlZLN3B1VmROS1JXL3d0bnlEYlU3ZlhOVWpyc2hSc1g1WitQSDZQcHZmb0ZzMEcra0dLRmdBUDRBYk9YZ2VQVmhaTVdxQU54NmxpVFhvWkZUa3NxT1BaVHB2UUNJSEc2TlBRV3UvTWVkZlVQdGFtYTgrYm5JYXVSQlZaeDFZN3FoYkYzR3BVd3JIMVMwbnJLYlJpY2NPeVFDZkNucGpDSUJJRk9HYlNxSXM5eUkvaTYvWnJSb2J5bmdqblVHU005dE45VzZqaStHajlobEdxYU1vRVZSbzN2WXJyNTFxZU9sMWlwbldEY2FJMnF3YzBCMDllQW1QYm1yeG1ob0xhNHdUVjJRSkpJTU1aOGZvRGRjL082MjdJZ0xIWklWcCsvb0hKRytCOW9KZDFqelRNTFI1Mm14NE1kUnZoVHVvdFFLTmNNQmErRXVZQ3BTdXZjZElRVkthVnlBcHlUUEpabkRXMjZYekJ2QjdSb3F0alBCZTJ2ZVhsQmx5bGZCb0tpZk15U2puYmVDemhNU3ZJb0xJVjNmWGV5R1N6aUpRakZUTFozOEVPZXNSMDQ3bVZXengrRy9KemNZNFVnc2pEb1VUQXEvaksyR0hlRzdZbXNoUkt4Mkc5cGJITkZmSU9yUWYwdnZidGhBMTRCdVpNaldFUGdMNm81NjNxSXU1eXVPM2xUQ0xwSGRYK2xKZ0Y5NXh3SW5ycjgrUHBJRGRFNWZ3NEw4c1ZZc095cjNKZWxJajdVNTR2Njg1cFYyNFBlNDNNUzkzOGRubjdIRlZmRnJVaXd5MEdPalZwdjlOWWw3N1hxY1k0UXplWDZTM0Rib25yK0txaDg1ZVFlMmtobk5hNTJ4TGZuTitxRXJlTHBvU2pzZjZ5eXpLZGtuMzJwT2xCbTZBQkFyVmVaOFA2QXN0Wmd5d1gvM2pqNVU2TWdPMTZJZ1d1UkpqUjNwcG9XU09SQUozZ2ZWMmlDbVloMTRmVUx4cUNML3l4QUFDV2ZIaHFsQnhIVEU1QXg5RHpVTzVqUFpacVBsVHNkWGRqalc0ZFVsR2VOd0EyMkRoRUFzdHJ1Rk5aWmwxWG9mck9iS0k5UUJhMDRCT1ZnSHNqVG94K1UrSzQrUnUxdzQyUlFrcEhZWFQ3bnc4S3I5eFd1aUhZN2UyRDYxRUZsdzJoY3hoaHhHN3JHK25IZHdaSXJNcTJIbk9CcnJ2TnFuRWFnMVN5ODUwaGVOM1pIU0I2eDU5bHF0OE5aYkFLMmVjWUFkMkwxMGhBUHRwZnZrZXgxKzJuTlMvbUVROTNlOFJFaGJFNGNhOGl3dTZCcExXVXlCeWdJdEtscisxay91R2FUMEM5NnlGUHVWUWJFRE52M1JrNUt1S3RXaU9XTksyK0hOTlpuRlIvYlRhemloTG9tOGJXZm5Pc3k2ck8xQjdudkxLUTlqRmRmTWRHZ3crdlIrUU9mV2thdyswWk9TUVQ0aHZ6RGE0SFptTTBPZVFpeHVtUGg4US83RElBZ0M2Mit5bG1ZbHA5eVo5K2daYnY2cUVVNW92NnFENStUNDVSTFFWL0dnRzNwWU9hQUxIcDVQVkNsWjJGbnAvci9ENXE2U1JvNkZMb0Q1NkFmaGgyaHJ0YU5Ca1hTOGtwMERNMXF0dlhCMkVkOHZueGlQOFVyWnBKSHV4amdrdXdjRndtVW9PN1RQTTJpZjFyNEdyZ3F3b2F5RjNIL0tXcU9maHBGOWNsTS9GYWlPLzNmVHAxczVmUWI3Y3dlNlYvQS9rRGVlZ2NjTEZqenEzNGN0QnZJWkpIL1NPM3VkcHhRTTNZcFdpZWhZeExhdjRXbHBPYXFINVRCN0ptNUg1U1NVdytsQWxibG1uRWU2S2Z5OWVBS0Zuc1F4Wjg1NkZUK1VvanlNZnRkRTBHU3B4eWhvT3JySy9Cb2Z5ZkNIUjdPcHRYcUNrd3JKUktWVWRnSXZjelJyYkFMVVZ4R3J0eTBQaXh6VGkwUTM2WjJSaVhJbGw0ZHNWdTlXWWltdWIyTmNUb2c2b0N5Z1VuODFxSzNWb1FwNjM3K2lnS1lDTU1vZzd5WHBMOW9qd0JJZDRFMFBkczlBaXhrUW8yaURJL2NTVU9ObEYwaFlqaytSUG5kWHZqeFVldEhVYzVENzM1T2Y0amZVV0dmT1NGbVMyV0VjbUJKZVl1ZUNKKyt5ZEpqQ1RxTmYzSXBKekJ4dFZuczgyZDVJUC8yMUNJUlhZMkhuaUljK2NZQzkrMnQzUmZzamtMd1ovbFpQSHF4YWYvR1lNRitrdXNybk1wak41RnE5MXF1QmI3MmhIV25TM1NzWC9zRkQrZVEybEJ5NnEwaVgyYlRyOUxHQ0lFZ3hqZTUzVkY5MkdVRURmWURuMjhSQ2NZbXc3cWtWeDRRM3VsTjlkQUVEcmpYdHQyWC9QQVgrQzZzRnhkZFZKSWVjaXBqSURWcEZYMVBzRk9tdWV1NU14MEVCYmpkMFFsNVJQQXVIQkgwMEdva2FrU0tIWnQrOFVVTlQvZWhxd0VjRmRtdGY4QlcrQkxtS1o2RU93Tm5OaTZMeTRJNUVIdVlGVEZ3ZDhialhuWFBmeG1lWHRzcFBzNDFOUE9KUW4rZG4rL0p3ZHQ0aWwrSnE4Z1Z6VXdFOGM0QzNhWFN6U21ZV0YxeUZVQkhWZmlpUW9xS2dUOFgyQ251MWduYjRmQUlVWC9xbmh0dnlxRmFQejZWdVk1ZzZLNzN3R2xrWnh6UkRCZFlIZmhXY2NVTVFSekZPRUhURlJBMWMveW5lMVJWOFc2SGNQK3FkVFFHa0w1TDJGZjVLZmdLeU81anEvWmlTbldMSDNTUUpWd3pvYVFkU2xrTGVPREtjNmNFQ051ZitPekwyNGFtMVE4Sms9
kind: Secret
metadata:
  annotations:
    rafay.dev/secretstore: rkms-secrets
  labels:
    rep-organization: 5m18rky
    rep-partner: rx28oml
    rep-version: rx28oml
    rep-workload: kvq9ov2
  name: kvq9ov2-new-worklo-4145937496-ingress
  namespace: ns-1
type: kubernetes.io/tls

---
apiVersion: v1
kind: Service
metadata:
  labels:
    rep-container: kvq9ov2-new-deploy
    rep-organization: 5m18rky
    rep-partner: rx28oml
    rep-version: rx28oml
    rep-workload: kvq9ov2
  name: new-deploy
  namespace: ns-1
spec:
  ports:
  - name: port-80-tcp
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    rep-app: new-deploy
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    rafay.dev/registry-29967y2: gajanan-acr
  labels:
    rep-app: new-deploy
    rep-organization: 5m18rky
    rep-partner: rx28oml
    rep-workload: kvq9ov2
  name: new-deploy
  namespace: ns-1
spec:
  minReadySeconds: 10
  progressDeadlineSeconds: 300
  selector:
    matchLabels:
      rep-app: new-deploy
  strategy:
    type: Recreate
  template:
    metadata:
      annotations: {}
      labels:
        rep-app: new-deploy
        rep-organization: 5m18rky
        rep-partner: rx28oml
        rep-workload: kvq9ov2
    spec:
      containers:
      - args: []
        command: []
        env: []
        envFrom: []
        image: gajanantest.azurecr.io/hello-openshift:latest
        imagePullPolicy: IfNotPresent
        name: new-deploy
        ports:
        - containerPort: 80
          name: port-80-tcp
          protocol: TCP
        resources:
          limits:
            cpu: 250m
            memory: 1024Mi
          requests:
            cpu: 237m
            memory: 972Mi
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      tolerations: []

---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    rep-organization: 5m18rky
    rep-partner: rx28oml
    rep-version: rx28oml
    rep-workload: kvq9ov2
  name: new-deploy
  namespace: ns-1
spec:
  maxReplicas: 1
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 80
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: new-deploy

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/configuration-snippet: set $workload_name "acr-workload-wizard";set
      $workloadId "kvq9ov2";set $orgId "5m18rky";set $partnerId "rx28oml";
    rafay.dev/dns: 'true'
  name: kvq9ov2-new-workload-wizard-acr-http
  namespace: ns-1
spec:
  rules:
  - host: new-workload-wizard-acr.run.rafay-edge.net
    http:
      paths:
      - backend:
          service:
            name: new-deploy
            port:
              number: 80
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - new-workload-wizard-acr.run.rafay-edge.net
    secretName: kvq9ov2-new-worklo-4145937496-ingress
