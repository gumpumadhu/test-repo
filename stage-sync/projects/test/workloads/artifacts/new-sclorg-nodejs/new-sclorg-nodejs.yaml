apiVersion: v1
data:
  tls.crt: 
  tls.key: c2VjcmV0c3RvcmU6cmttczoxOTlnL21rS3B4QzVzczMzUnhVcW9YZ1hwL0thcEpyZ1NrYngvc0pVV2xya1J1VTZpbS9PVGVOKzNPWlQ0S1EzVkYyRU8vQUF5SFU2SG9MQWpRVWFYakFjdGRHM3VBbU9FVFJRNnc2NWhSS3ZtTGUybThCZitXc3RDT1JGUGJHcHZtR2NwTTVVS3BxQjVUNlFaMTlBQ1NadjQzdHlkZ1BmWDhtckxSbUdSUW9JVXNjczBseXVEd0NZSVZKRWNBYmFTcWNYWUNzWlZkUUdjSHV2NmdYb3RVOVJjNUxGb3FybzhEVll3dWJZY0tIVWlvaGkzdmhHT0p4TDhVeWJCV0c2TVIzSWJSdW1PSmhSQzR1ZnVqWFJjS1NSOUREc0RzMFpURWhJbmRhSVlHMHhVOXBkUjExdUcyZ3hFK09JNC9xSW5RSXlUam5kUmp1ajdPNnp0NXhPWlBpTE1OSldlbGdqSHY0eExhd1krRnNUZUJlQWsrTURiN0c5Mm5COVlocjZiQkI5a3FreWJwV0srMXY2dThuVDUyVVNXOWcrMGFFZUFrcTd0NVJCNXgxdjhiM29ib0ZXTzZDd213WFZRaXV5cVJQT3NGNWZqYjFlUTJQVzA5aXBFU2VnQ1ArdTRxSmtMZjZUNXRvbHpWK0JHMDhmRENGQ3ppdjUxK09rQnhNRVdPUFAvZlhEcjdZN3padHRtb3gyaEhOcXFKalV6OTV5azRzZmVNQlhDSkI5Ymc1Nnl2MCtHczN1enFyQ0l4cnJqbHRqQVlhSTV2NUxBSmVJRTR5bnpOTmttVEFiZnd1czIxbS8raEJBbXpRRWJkZ3ZRVjNIY3dQcGF0bzF5WTRWdDJDL3IxMkd5UVFJcUVqaVJHb2hnZ1RudGp6dGwxVVRPSTdTYU9WZ21mOEdBaTBJV0lGZ1RNOVpDU3I4Q2c1V3RGZXJLbEcveGkwdFVHM1phRmZPeGpaU1R1L1dHZUlkcitRdWgreTh5VXlENUJGMHZRVTBhVHlVbDhBWjdzeDZwY2ZYTjFWQkZVUGlmU0YzTUZEVU1pdGlQMEtUSUY5cTUyaVYzZXQ1THVqMURoMWUxOUxwSEVGYS9uZnpxaVBjMmYyS0h3aUNjdGV1c3BEMytyYnZMbFFEWUF6eVRXV28zNVlkaEJCejlmQ0ZEclRxOXQxcXBWbUl5S0RWdFFXSE9zWU95TWZMd2ljZlFvU21sbHozV1p2c2sxK3NMMVRPNjBxc2dNWUFvNllLL29tdTA2MDR5dnpoZHgrbVI3cVdFdWtjVXNTSE1TcjM0N1E3VXRCK0xHSTFYNHBtUTV2ZVprZ3RqcDFmdFRPdWRpaWtva0w0Vmh3SW1CZlNHYktPM0V4dnR2R0I0dFExS0NhL1dUZC9KL0tZVmNkRml4SU56VGhYR2E4RTZiWmhLUnQ1cVRicm0xdkcvUUR2cEs4c2dTbFY0N2VqMzFqRXZlSnozNDl1b3QvUkNEbnM4bmxQMWxsRFZQZFgzZWhWZy95RXcvODg5QUFwdDNDTzF1ZzBveW82TFhkYWFCdEVpRi9yK0ZjemVFU1hpTVhEZExHWENveTNINy82TE1JR1ZDRWdsZEQ1RTJvM1M1Z1JYTVlneUQyRkJvc242RDRqbVpiWDVTNW53a0lUejhBRlpyMFFVR2RMSW5YcVh6cFZqUkFXL0J6QkJ1VUYzMEhPeW82dTBRS2tIQTJYM1psYTU5aXpVQmE0ZXJwaVljTzc1T3hUdUhBYUo1eXNsd25kZ2NuSTYvUkFZcTI0NUw4azk2VGFXcTE5Vzc0aUlCQyt3N1hMak1yaGhCMm5Fa0pIYVp6YytiZDJ2VHRKdkpDUEF6c3ZVWGZOWVU0RVA5UVZMVWpGdEtCZ041S3JsWWxHd2YxVGltd2RHc0RrYkdybmxlQUtZUVBhdUJxdDV4TVpjc1p4M1JCSTFNeEVOMDMwVlBDYmpkazltQjJFNkdGNGdQRmZoaWJBclN4cDVpY3NFSTh3UW1ac082SUxEazJTVjRqNVhVNERJd095MEQ1UnRGVm9YWmxPL3ZsaFRMVDU5ZDhTZjhWQVVCbHBzTWNONURmOE5kTi80TjV6cnAwRGFjOWsrUFRCWjlaTVJFaTdmRjIwLzlYRnJheDBHTGF2SGxRTjIreEFrY3BLQnorWjFRR3lST3FZT3RSOWJhbWNLeXFQNGNHV1l3STl6RFRCRWZRTHRpU0VxNXl5NWs1Rm11dy9XcXFlUkR5ZW1uZGQwcGlLNGJ5djdudVNBeFp2MFZ6eTF0ZDhteGxMR1lsZGM0YU1pVDVqaVV1aHZPbUREei9ETkNHMUtrRllUM2ZwTVh5UXhSdnlEOVQ3OHJnT0NhV2lTR1JMTlVmUkp2UXBkYngvSjJpV2RoTFhhZTNPNjRDMTVsdFRMSnBWWFNRTFFxcUREZWd6OEQ0RzBqQ0c5WE5PeWJiQ1hqc1A3dlphRmNZek5IVDcwRWc3Z2t2NjRQVTZnT3hXZ1RRemJkM3owbEVObXo3cHlqaHljSnZVeE93dUNqTWU3L1M5REVTc3BZN2hTTWlGODBza0V4cFg5OUx5NVkybW9qeEJoWlRiZEtwYiswcTI1eXBOT2VoTHF6cWgxR1owdHViZXZqZEtmbDlOLzZEd3NGZEk3bmtERW5zZlF2Q2pxS2pqaWU3SXVLRlJKc1J5N1RabDNzM0tBRmpnT3Fvemh0TU5meGhwWlNaSFkyYUpyd0d2bDAwNWtUSzVRY3RlTWpBTS9EbktwQXI5cUF5YkhKbWFzY21qOU5pSG5TWEFpaE5hS2k4ZDJLcmJ5ZlhxREgrTGIvaUw4ZmtYSGNmM1Q3SUZjVUw3TENTL0lvb1lLTk5iaTlEeGUwVy9tTitwUDZCUFNRNldTS1V3bTVia0dOakZKTE5DSDdtZFBsRmYwMnJ2MlBlaS81SlIwdFVVOTE5S3NqQ2hLSzJsSi9QbkRVRmpoakg4VnZlaFVQRmF1V094WUU2RkN0NGNhRDRxdzJtMFFmY2dzRjl5aVNtSmtDMCt4K21HSFd2dDhERkU0eDBSWTlCN1JXRzdkZGdVOHFrK2RzUjVvdHVaZWNzMzQxUE13d1JjWS9tM0kyY2xjWTN1bW5wc2lnSUJkb21JcnRXTk5wbmJFVEluTTBsZ1htR3FiTXlORFIrZlhMd2pKVVVFblF1cHZYZ2NoN09OakRoSUlsekZZZTlwUXFiMXZ0SmI1NkQ0MEJXUEJIK3drMlNIbjlRT0Z2OXV3Nm83empOdjMwNEplc0k0VllFVWxqT09BNzF0aHlReUxURk54RzlRUGxQK2NuZzNYanZLS09ucHRORFZ2V2pieklvaVhEd2VGRGVCejJuYlFSQktiVHdGZ3JvL3RVcktLNDJPZ3V6aTJYdVY3RTdpak43bzNPWGtRbG5RSDZYNjFROUNVZENzQU5XNGMvOXZJclpibm9rYmpHMFRUeXRYQ1VZL3hvd0RDWUJ0OWM3d1N1OUVGOTdQNTV1N3ZtR0RVanEvY2s5OGRhUDdJVXpOcEk2NEVuZElDV2lDTkNZNDFQeEpGVWhFVVc1akVDM0ZqTGgvQTNMb05Ddjg5KzN3NG9zTXlBZkVaSXRoa0FpQ2tYMzVhVUZxTEpocDJ6THZTcEQvUUFDMUI0VEhKZSswb2lrYzFUbWY4MFAydVJxUWFjSkhITk8xYVRmeWs2WmFpZnFWeTBSWUJRWkxzVm9UL0lseS9uelVGTjN5VXMzaGxaMlR5VVFDbmVXQ1Q4ZlhtTFoyd0RacnJIUWpXdFBsQ0lQRG4rMHRuclc0YlpvYTNIQXRSRTBxazVoWnhjbnJ3NmdDOWxHRkdkUGxITFIwWjFuSlgwcDVkSFV6aXU5ZC9OS3VySWp1dFZFcjFud2NvMEh2aEJ4eUVIWThSVGZLekI1Y1hPdWgvUlJLWmFRMnlTRHJnd0dQR1dLSFpnZVJ6YkdzUlVyVGQxYURKRXM2WWN0SVhrazRwVkYrdlgvcE16RFRmRGlPVnJneFpBNEhOaEYvVmRCblU0ZFFmYWF4cjB2NEpTWVJSZU1BQUdPanhyU3lWQThXS2ZMWi8xOTBvVUVIS0d2bmZEbHpUMit6ckJHRWJncncxWEk0OGJPY2ppeDUzd056V1ZMS3pKKy9GNDk0bk0yWDVTcWpzWCtOd3QzYWxpTk04Q0x0SzlWVlJCUldCa0F4L0p3bzBKWFR6RXRMeEJNWGVmTGpyR0VkMy9GSHNoYlNQbFRuRnI3WHlnYzduNmFuem9ZYWVTRENkRlVYaTJPU3A4bWN3TmZaS2c5cmxvVmJnSHVTNTdWWDhXZ3BJb2JKQU5xVFZvcHYrT3NHdTdwNUYxNTFqTEpRRFk5RHVQc1VLelc0cUJOUUpjWmYrN2lwUGIva2dzQjZHYkFDTVRpQkpPUllSUXo3djYxSlQ4c0d1R28ybUV1czBDemdWWU41cm0wMmdPUkhZQU8vMVR3WlJST1dCRkd0M2phZkxLcFl2NWRncW1ZNVBlTjU1M3A3MFBqZWxwdWVDMCtUaEJsdTlYb0ErYXpKMjd5bzIyVnAzNFdHYVBuY1NaclZ3UFNMdFVGSnFYYUpmdWhFRTlmSzY3K2ZYaFV6L1ZibE5vLytVVFE1U1RhSEp3cHlFMVo2YlhPL3I4TmlSSWhTNmVMUnU2Sk9PTHBhUHdXWVFLZjBlTFhNTEk1bUZLbWk1NkFwQlloNVJrTGVjT3ZJVzd6NDIvY2FyWTg1V0pRMzBFS09VS1BhbEtOOTJ0Tzk1YThxVll6SWREcURvWEpDcDV4RlJtL2lGMEZESFJZa1ArdXFIOEc2aDlMbDBDVmNaRGNSVi9jL1BwdmlvNzdMTnBvT0FoN2dSQ013MCtVOGNhMWlTQndTVlF2ZlBvQlZyUVJINnE4WHhlZmRXNmE0WkNrS3pYcmZHbytTbHdPbkFOU1JyQjNDbkxNUmZnVGdvT2R0MVhmQkorV2VQeUp6ZVpBMGpJQU8wVWxkTUVoWW5tczZqc1RJQjNDcmhWTHFIYXdZOGp4WC80Umc1L3oxK0ZpQnBaVG5pa1RES1M2U2V0allJMnFqRTNUUnl6OVJEcHR4aDFsQVlBcTJ6N2dJOEZ0S1dlbXN3bjNUdVRhNVc1c0psQXh2Rm5yR0xjWVA3VTZlVWRHbFptQ3gxNTA4Qk5LWU9XZ3hEekhQekJSV1BlYXowZ2lxcDM0M2REWjJJNHozdTlFQU4zS051UXd2T2hIVVpvTG5EWSsxVWFqN2xNZHZDbWl5c2sxbWozaG84ZFVoSjJKTWNuSnZyNExISVc1OXp6dFJ3TU1kdFZOMjB0S1U5WENuT1MwbjNYNDFtUENOaDAyNkhWM0llWE94cnViNVI4b0h1SzJqcTJ1bGluZE1pSWxoNVM1SU14MzFaWUFXM0d0VGdHTVRNaGJYVUpvaFZSVmtrU1d0QTZWcmJZRW9hV0lZRUczQ2MvUExJdWN6Q050WUJLbWV1dkpHbzVvaFRzMVRVRjZxVXptTTllOG5PbFJYcG84ZVlJNGZZVnBVeWhhSUdwQ1IxeG54M1BQNVBPY0tVV00ySU1adktNcm5UWHlsTjJaZjZla1ExTURhclZDTzRpckxTTTdXYnkwZ0FkS2JUdWRWdldoK2hIRnluNUI5MHJoKzdya0lrYitmOVFaNnZqdWd3R2cxK010YS9lbUFRZk1KOUNpVmhkeXZwTXlqY0xtRnJDKy8rbVJrSHo2b1YxbE5LcHFTR3FoVXorNUFUOEMySkpPcHJ4Y2Qwdm9heXpCc2hMNnpwT3lDditVTnNuS1lONnREN2c9PQ==
kind: Secret
metadata:
  annotations:
    rafay.dev/secretstore: rkms-secrets
  labels:
    rep-organization: g29xn20
    rep-partner: rx28oml
    rep-version: rx28oml
    rep-workload: koleelk
  name: koleelk-nodejs-scl-61415769-ingress
  namespace: test
type: kubernetes.io/tls

---
apiVersion: v1
kind: Service
metadata:
  labels:
    rep-container: koleelk-test-cont
    rep-organization: g29xn20
    rep-partner: rx28oml
    rep-version: rx28oml
    rep-workload: koleelk
  name: test-cont
  namespace: test
spec:
  ports:
  - name: port-80-tcp
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    rep-app: test-cont
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    rafay.dev/registry-2d93dlk: system-default-registry
  labels:
    rep-app: test-cont
    rep-organization: g29xn20
    rep-partner: rx28oml
    rep-workload: koleelk
  name: test-cont
  namespace: test
spec:
  minReadySeconds: 10
  progressDeadlineSeconds: 300
  selector:
    matchLabels:
      rep-app: test-cont
  strategy:
    type: Recreate
  template:
    metadata:
      annotations: {}
      labels:
        rep-app: test-cont
        rep-organization: g29xn20
        rep-partner: rx28oml
        rep-workload: koleelk
    spec:
      containers:
      - args: []
        command: []
        env: []
        envFrom: []
        image: rcr.stage.rafay-edge.net/rafaycommunity/rafaycommunityuser/testapp:v2.0
        imagePullPolicy: IfNotPresent
        name: test-cont
        ports:
        - containerPort: 80
          name: port-80-tcp
          protocol: TCP
        resources:
          limits:
            cpu: 250m
            memory: 1024Mi
          requests:
            cpu: 237m
            memory: 972Mi
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      tolerations: []

---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    rep-organization: g29xn20
    rep-partner: rx28oml
    rep-version: rx28oml
    rep-workload: koleelk
  name: test-cont
  namespace: test
spec:
  maxReplicas: 1
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 80
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: test-cont

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/configuration-snippet: set $workload_name "new-sclorg-nodejs";set
      $workloadId "koleelk";set $orgId "g29xn20";set $partnerId "rx28oml";
    rafay.dev/dns: 'true'
  name: koleelk-nodejs-sclorg-http
  namespace: test
spec:
  rules:
  - host: nodejs-sclorg.run.stage.rafay-edge.net
    http:
      paths:
      - backend:
          service:
            name: test-cont
            port:
              number: 80
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - nodejs-sclorg.run.stage.rafay-edge.net
    secretName: koleelk-nodejs-scl-61415769-ingress
